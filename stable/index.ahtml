<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.20">
<title>Build a Custom Selector</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Build a Custom Selector</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#what_is_a_custom_selector">What is a custom selector</a></li>
<li><a href="#strategy">Strategy</a></li>
<li><a href="#create_a_service">Create a service</a></li>
<li><a href="#create_a_content_type">Create a content type</a></li>
<li><a href="#request_response_format">Request / Response format</a></li>
<li><a href="#integration_with_countriesnow_api">Integration with CountriesNow API</a></li>
<li><a href="#customizing_with_guilliotine_lib_optional">Customizing with Guilliotine Lib (optional)</a>
<ul class="sectlevel2">
<li><a href="#strategy_2">Strategy</a></li>
<li><a href="#setting_up_a_custom_api">Setting up a custom API</a></li>
<li><a href="#adding_a_new_type">Adding a new Type</a></li>
<li><a href="#extending">Extending</a></li>
<li><a href="#final_controller_code">Final controller code</a></li>
<li><a href="#manual_testing">Manual testing</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>This guide will lead you through the required steps to build an input of type <strong>Custom Selector</strong>.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="what_is_a_custom_selector"><a class="link" href="#what_is_a_custom_selector">What is a custom selector</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Custom selector is a specific input type that get its items from a service.</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/custom-selector-books.png" alt="Custom selector" width="100%"></span></p>
</div>
<div class="paragraph">
<p>The image above is an example of a custom selector that uses an API to populate the items to be selected.</p>
</div>
<div class="paragraph">
<p>The flow of execution is really simple, and is described by the following diagram:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/custom-selector-flow.png" alt="Custom selector" width="100%"></span></p>
</div>
<div class="paragraph">
<p>To read more about the details of a custom selector, visit its <a href="https://developer.enonic.com/docs/xp/stable/cms/input-types#customselector">documentation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="strategy"><a class="link" href="#strategy">Strategy</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Our goal in this tutorial will be to implement a custom selector that lists all countries in the world, and then use this custom selector in a new content type.</p>
</div>
<div class="paragraph">
<p>In order to do that we will:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Create a service that returns the list of all countries in the world</p>
</li>
<li>
<p>Create a new content type and add a custom selector input type that uses that service</p>
</li>
<li>
<p>Use an API to retrieve the data of all countries in the world</p>
</li>
<li>
<p>Use <a href="https://market.enonic.com/vendors/enonic/http-client-lib">lib http client</a> to consume that API and <a href="https://market.enonic.com/vendors/enonic/http-client-lib">lib cache</a> to avoid unecessary calls to the API</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="create_a_service"><a class="link" href="#create_a_service">Create a service</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s start our work by creating a service.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>In order to do that create a folder <code>countries</code> inside <code>src/main/resources/services</code> and then create a <code>countries.js</code> inside the <code>countries</code> folder.</p>
</li>
<li>
<p>Place the following code in <code>countries.js</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">exports.get = function (request) {
    return {
        status: 200,
        body: JSON.stringify({
            hits: [
                {
                    id: 'norway',
                    displayName: 'Norway',
                    description: 'this is Norway'
                },
                {
                    id: 'usa',
                    displayName: 'United states of america',
                    description: 'this is USA'
                },
                {
                    id: 'france',
                    displayName: 'France',
                    description: 'this is France'
                },
                {
                    id: 'portugal',
                    displayName: 'Portugal',
                    description: 'this is Portugal'
                },
                {
                    id: 'iceland',
                    displayName: 'Iceland',
                    description: 'this is Iceland'
                }
            ],
            count: 5,
            total: 5
        }),
        contentType: 'application/json'
    };
 }</code></pre>
</div>
</div>
<div class="paragraph">
<p>This service basically returns a hardcoded data structure with some country items. We&#8217;ll of course improve this service later, but for now this is enough to get our understanding on how the service will provide data to our custom selector.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="create_a_content_type"><a class="link" href="#create_a_content_type">Create a content type</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now that we have our simple countries service, let&#8217;s use it in a specific content type.</p>
</div>
<div class="olist arabic">
<ol class="arabic" start="3">
<li>
<p>Create a folder named <code>person</code> inside the <code>site/content-types</code> folder of your project.</p>
</li>
<li>
<p>In that folder create a configuration schema named <code>person.xml</code> for the new content type.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-XML" data-lang="XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;content-type&gt;
  &lt;display-name&gt;Person&lt;/display-name&gt;
  &lt;display-name-expression&gt;${firstName} ${lastName}&lt;/display-name-expression&gt;
  &lt;description&gt;A minimal Person content type&lt;/description&gt;
  &lt;super-type&gt;base:structured&lt;/super-type&gt;
  &lt;form&gt;
    &lt;input type="TextLine" name="firstName"&gt;
        &lt;label&gt;First name&lt;/label&gt;
        &lt;occurrences minimum="1" maximum="1"/&gt;
    &lt;/input&gt;
    &lt;input type="TextLine" name="lastName"&gt;
        &lt;label&gt;Last name&lt;/label&gt;
        &lt;occurrences minimum="1" maximum="1"/&gt;
    &lt;/input&gt;
    &lt;input type="CustomSelector" name="country"&gt;
      &lt;label&gt;Country&lt;/label&gt;
      &lt;occurrences minimum="1" maximum="1"/&gt;
      &lt;config&gt;
        &lt;service&gt;countries&lt;/service&gt;
      &lt;/config&gt;
    &lt;/input&gt;
  &lt;/form&gt;
&lt;/content-type&gt;</code></pre>
</div>
</div>
</li>
<li>
<p>Now let&#8217;s test it out&#8230;&#8203; you should get a selector with the items that you defined in the previously created <code>countries</code> service:</p>
<div class="paragraph">
<p><span class="image"><img src="images/custom-selector-hardcoded-service.png" alt="Custom selector exaple 1" width="100%"></span></p>
</div>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
You can also refer to a service file in another application (for example, <code>com.myapplication.app:myservice</code>) instead of adding one to your application.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-XML" data-lang="XML"> &lt;config&gt;
    &lt;service&gt;com.myapplication.app:my-custom-selector-service&lt;/service&gt;
 &lt;/config&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="request_response_format"><a class="link" href="#request_response_format">Request / Response format</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before we start properly coding our service, let&#8217;s understand how our custom selector and our service interacts with each other.</p>
</div>
<div class="paragraph">
<p>Custom selector will request data from our service from a HTTP get request with some query params:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">ids</dt>
<dd>
<p>Array of item ids already selected in the CustomSelector. The service is expected to return the items with the specified ids.</p>
</dd>
<dt class="hdlist1">start</dt>
<dd>
<p>Index of the first item expected. Used for pagination of the results.</p>
</dd>
<dt class="hdlist1">count</dt>
<dd>
<p>Maximum number of items expected. Used for pagination of the results.</p>
</dd>
<dt class="hdlist1">query</dt>
<dd>
<p>String with the search text typed by the user in the CustomSelector input field.</p>
</dd>
</dl>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
It is the developer responsability to properly use those params in its favor to come up with performant and complex logic in order to retrieve the items from the service. For instance, pagination can be achieved based on <code>start</code> and <code>count</code> paramaters.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>On the other hand, our service needs to return a specific JSON data structre in order to be able to communicate with our custom selector:</p>
</div>
<div class="listingblock">
<div class="title">Sample JSON response:</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">{
  "hits": [ <i class="conum" data-value="1"></i><b>(1)</b>
    {
      "id": 1, <i class="conum" data-value="2"></i><b>(2)</b>
      "displayName": "Option number 1", <i class="conum" data-value="3"></i><b>(3)</b>
      "description": "External SVG file is used as icon", <i class="conum" data-value="4"></i><b>(4)</b>
      "iconUrl": "\/admin\/portal\/edit\/draft\/_\/asset\/com.enonic.app.features:1524061998\/images\/number_1.svg" <i class="conum" data-value="5"></i><b>(5)</b>
    },
    {
      "id": 2,
      "displayName": "Option number 2",
      "description": "Inline SVG markup is used as icon",
      "icon": { <i class="conum" data-value="6"></i><b>(6)</b>
        "data": "&lt;svg version=\"1.1\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"&gt;&lt;path fill=\"#000\" d=\"M16 3c-7.18 0-13 5.82-13 13s5.82 13 13 13 13-5.82 13-13-5.82-13-13-13zM16 27c-6.075 0-11-4.925-11-11s4.925-11 11-11 11 4.925 11 11-4.925 11-11 11zM17.564 17.777c0.607-0.556 1.027-0.982 1.26-1.278 0.351-0.447 0.607-0.875 0.77-1.282 0.161-0.408 0.242-0.838 0.242-1.289 0-0.793-0.283-1.457-0.848-1.99s-1.342-0.8-2.331-0.8c-0.902 0-1.654 0.23-2.256 0.69s-0.96 1.218-1.073 2.275l1.914 0.191c0.036-0.56 0.173-0.96 0.41-1.201s0.555-0.361 0.956-0.361c0.405 0 0.723 0.115 0.952 0.345 0.23 0.23 0.346 0.56 0.346 0.988 0 0.387-0.133 0.779-0.396 1.176-0.195 0.287-0.727 0.834-1.592 1.64-1.076 0.998-1.796 1.799-2.16 2.403s-0.584 1.242-0.656 1.917h6.734v-1.781h-3.819c0.101-0.173 0.231-0.351 0.394-0.534 0.16-0.183 0.545-0.552 1.153-1.109z\"&gt;&lt;\/path&gt;&lt;\/svg&gt;",
        "type": "image\/svg+xml"
      }
    }
  ],
  "count": 2, <i class="conum" data-value="7"></i><b>(7)</b>
  "total": 2 <i class="conum" data-value="8"></i><b>(8)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Array of item objects</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Unique Id of the option</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Option title</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Detailed description</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Path to the thumbnail image file</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Inline image content (for example, SVG)</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Number of items in response</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Total number of items</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><code>hits</code> is an object containing array of items that will be listed in the selector&#8217;s dropdown. In this last example we&#8217;re using the optional <code>icon</code> and <code>iconUrl</code> to provide icons to the items.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="integration_with_countriesnow_api"><a class="link" href="#integration_with_countriesnow_api">Integration with CountriesNow API</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Our goal now is to improve our current <code>countries</code> service. We&#8217;ll do that by:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Consuming an <a href="https://countriesnow.space/api/v0.1/countries/iso">API endpoint</a> that will retrieve the list of all countries in the world</p>
</li>
<li>
<p>Use cache to avoid unecessary requests to that API</p>
</li>
<li>
<p>Filter items based on <code>query</code> parameter in the GET request that comes from our custom selector.</p>
</li>
<li>
<p>Format that data to the proper data structure seen in the previous section</p>
</li>
</ul>
</div>
<div class="olist arabic">
<ol class="arabic" start="6">
<li>
<p>Start by installing the necessary dependencies:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Gradle" data-lang="Gradle">    include 'com.enonic.lib:lib-http-client:3.2.1'
    include 'com.enonic.lib:lib-cache:2.2.0'</code></pre>
</div>
</div>
</li>
<li>
<p>Then replace <code>countries.js</code> service controller with the updated version of it:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">const httpClient = require('/lib/http-client');
const cacheLib = require('/lib/cache');

const CACHE = cacheLib.newCache({ size: 1, expire: 3600 });
const CACHE_KEY = 'COUNTRIES_API_RESPONSE';
const API_URL = "https://countriesnow.space/api/v0.1/countries/iso";

exports.get = function (request) {
    const query = request.params.query;
    const cacheData = CACHE.getIfPresent(CACHE_KEY);
    let status, data, error;
 
    if(cacheData) {
        status = 200;
        data = processApiResponse(cacheData, query);
    } else {
        try {
            status = 200;
            data = processApiResponse(requestApiData(), query);
        } catch(err) {
            status = 500;
            error = err.toString();
        }
    }
   
    let body;
    if (status === 200) body = JSON.stringify(data);
    if (status === 500) body = JSON.stringify({ error });
    
    return { status, body, contentType: 'application/json' };
}

function requestApiData() {
    const response = httpClient.request({
        url: API_URL,
        method: 'GET',
        contentType: 'application/json'
    });

    if(response.body.error) throw new Error('Error calling countriesnow API.');

    const responseBody = JSON.parse(response.body);

    CACHE.put(CACHE_KEY, responseBody);

    return responseBody;
}

function processApiResponse(responseBody, query = '') {
    let countries = [];
    responseBody.data.forEach((d) =&gt; countries = countries.concat(d.name));

    const hits = countries
        .filter(country =&gt; query ? country.toLowerCase().indexOf(query.toLowerCase()) &gt; -1 : true)
        .map(country =&gt; ({ id: country, displayName: country, description: ' ' }));

    return { hits, count: hits.length, total: hits.length };
}</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Here are some notes on this new service controller code:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>requestApiData</code> will get consume the API and store the returned JSON on cache.</p>
</li>
<li>
<p><code>processApiResponse</code> is a pure function that will get the response from the API and return a specific data structure that is the one expected from our custom selector when it is consuming our service.</p>
</li>
<li>
<p>It is important to make sure that our service, on success, will always returns that data structure, otherwise our custom selector will not work.</p>
</li>
<li>
<p>In this example we&#8217;ve opted to only use the <code>query</code> parameter that comes from the GET request triggered by our custom selector</p>
</li>
<li>
<p>If we have a response from the API stored on the cache, we’ll get it, process based on the provided query param and return the json as a response.</p>
</li>
<li>
<p>If we don’t have it stored on the cache, we’ll get it from the API, and then do the same thing.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here&#8217;s a diagram that summarizes the flow between our custom selector, service, API and cache:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/custom-selector-and-service-flow.png" alt="Custom selector and service flow" width="100%"></span></p>
</div>
<div class="paragraph">
<p>And this is the final result:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/result.gif" alt="Custom selector example 2" width="100%"></span></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="customizing_with_guilliotine_lib_optional"><a class="link" href="#customizing_with_guilliotine_lib_optional">Customizing with Guilliotine Lib (optional)</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This is an optional part of the tutorial, and demonstrates how you may extend the GraphQL API to include additional info from the CountriesNow API.</p>
</div>
<div class="sect2">
<h3 id="strategy_2"><a class="link" href="#strategy_2">Strategy</a></h3>
<div class="paragraph">
<p>Our goal will be to come up with a custom API endpoint (using Guillotine library), in which we&#8217;ll extend the data we have under our Person content type. This guillotine extension will provide the list of all cities of the selected country that used our previously created custom selector.</p>
</div>
<div class="paragraph">
<p>This may be beneficial, as your front-end will be able to avoid direct integrations with the API.</p>
</div>
</div>
<div class="sect2">
<h3 id="setting_up_a_custom_api"><a class="link" href="#setting_up_a_custom_api">Setting up a custom API</a></h3>
<div class="paragraph">
<p>Lets get the new API endpoint setup first:</p>
</div>
<div class="olist arabic">
<ol class="arabic" start="8">
<li>
<p>Add the following line to the dependencies{…​} section of your build file:</p>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre class="highlight"><code class="language-Gradle" data-lang="Gradle">    include "com.enonic.lib:lib-guillotine:6.0.5"</code></pre>
</div>
</div>
</li>
<li>
<p>Add a controller to your project:</p>
<div class="listingblock">
<div class="title">resources/controllers/customapi.js</div>
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">  const guillotineLib = require('/lib/guillotine');
  const graphQlLib = require('/lib/graphql');

  var schema = guillotineLib.createSchema();

  exports.post = function (req) {
    const body = JSON.parse(req.body);
    const result = graphQlLib.execute(schema, body.query, body.variables);
    return {
        contentType: 'application/json',
        body: JSON.stringify(result)
    };
  };</code></pre>
</div>
</div>
</li>
<li>
<p>Finally, update <code>site.xml</code> with a mapping to expose the controller as an endpoint</p>
<div class="listingblock">
<div class="title">resources/site/site.xml</div>
<div class="content">
<pre class="highlight"><code class="language-XML" data-lang="XML">  &lt;mappings&gt;
    &lt;mapping controller="/controllers/customapi.js" order="50"&gt;
      &lt;pattern&gt;/customapi&lt;/pattern&gt;
    &lt;/mapping&gt;
  &lt;/mappings&gt;</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>After deploying the code, we should be able to access our endpoint. If for instance you used the hmdb-app as your project, the API will now be available here:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>http://localhost:8080/site/hmdb/draft/hmdb/myapi</pre>
</div>
</div>
<div class="paragraph">
<p>Visiting with your browser should give a 405 error, as GraphQL uses the HTTP POST method.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Your controller can also implement a GET handler if desired.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="adding_a_new_type"><a class="link" href="#adding_a_new_type">Adding a new Type</a></h3>
<div class="paragraph">
<p>With the custom API deployed, we can now extend it with a new GraphQL type, that will represent our country details, in which we&#8217;ll include all cities of the selected country.</p>
</div>
<div class="paragraph">
<p>In order to customize the API, you can use <a href="https://developer.enonic.com/docs/guillotine/stable/embed/extending">creationCallbacks</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The full controller code is available at the end of this section
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic" start="11">
<li>
<p>This is how you can define the type of the data you&#8217;ll extend&gt;</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">const context = guillotineLib.createContext();

context.types.countryDetails = context.schemaGenerator.createObjectType({
    name: 'CountryDetails',
    fields: {
        country: {
            type: graphQlLib.GraphQLString,
        },
        cities: {
            type: graphQlLib.list(graphQlLib.GraphQLString),
        }
    }
});</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="extending"><a class="link" href="#extending">Extending</a></h3>
<div class="olist arabic">
<ol class="arabic" start="12">
<li>
<p>Once the new type is registered you may use it in the <code>creationCallbacks</code>:</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">context.options.creationCallbacks = {
    'com_example_myproject_Person_Data': (ctx, params) =&gt; {
        params.fields.countryDetails = {
            type: context.types.countryDetails,
            resolve: (env) =&gt; {
                const countryName = env.source.country || '';

                if (!countryName) {
                    return {};
                }

                return {
                    country: countryName,
                    cities: requestApiData(countryName)
                }
            }
        };
    },
};</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The <code>com_example_myproject_Person_Data</code> must match the GraphQL type you want to override.
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic" start="13">
<li>
<p>The final trick is to create the GraphQL schema. <a href="https://developer.enonic.com/docs/guillotine/stable/embed/extending">More details on extending schemas</a>.</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">function createSchema() {
    return context.schemaGenerator.createSchema({
        query: createRootQueryType(context),
        dictionary: context.dictionary
    });
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="final_controller_code"><a class="link" href="#final_controller_code">Final controller code</a></h3>
<div class="olist arabic">
<ol class="arabic" start="14">
<li>
<p>Try it all in your project by replacing your existing customapi controller with the following code:</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="title">resources/controllers/customapi.js</div>
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">const httpClient = require('/lib/http-client');
const guillotineLib = require('/lib/guillotine');
const graphQlLib = require('/lib/graphql');

const API_URL = "https://countriesnow.space/api/v0.1/countries/cities/q";

const context = guillotineLib.createContext();

context.types.countryDetails = context.schemaGenerator.createObjectType({
    name: 'CountryDetails',
    fields: {
        country: {
            type: graphQlLib.GraphQLString,
        },
        cities: {
            type: graphQlLib.list(graphQlLib.GraphQLString),
        }
    }
});

context.options.creationCallbacks = {
    'com_example_myproject_Person_Data': (ctx, params) =&gt; {
        params.fields.countryDetails = {
            type: context.types.countryDetails,
            resolve: (env) =&gt; {
                const countryName = env.source.country || '';

                if (!countryName) {
                    return {};
                }

                return {
                    country: countryName,
                    cities: requestApiData(countryName)
                }
            }
        };
    },
};

const schema = createSchema();

exports.post = function (req) {
    const body = JSON.parse(req.body);
    const result = graphQlLib.execute(schema, body.query, body.variables);
    return {
        contentType: 'application/json',
        body: JSON.stringify(result)
    };
};

//

function createSchema() {
    return context.schemaGenerator.createSchema({
        query: createRootQueryType(context),
        dictionary: context.dictionary
    });
}

function createRootQueryType(context) {
    return context.schemaGenerator.createObjectType({
        name: 'Query',
        fields: {
            guillotine: {
                type: guillotineLib.createHeadlessCmsType(context),
                resolve: function () {
                    return {};
                }
            }
        }
    });
}

//

function requestApiData(countryName = '') {
    const response = httpClient.request({
        url: API_URL,
        method: 'GET',
        contentType: 'application/json',
        queryParams: { country: countryName }
    });

    if (response.body.error) throw new Error('Error calling countriesnow API.');

    return JSON.parse(response.body).data;
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="manual_testing"><a class="link" href="#manual_testing">Manual testing</a></h3>
<div class="paragraph">
<p>Let&#8217;s finally consume our custom endpoint to check if everything is working as expected.</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/data-on-playground.png" alt="Person data on query playground" width="100%"></span></p>
</div>
<div class="paragraph">
<p>In this case we&#8217;ve ran the following query:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>query {
  guillotine {
    get(key: "/mysite/bruno-reis") {
      ... on com_example_myproject_Person {
        data {
            firstName
            lastName
            country
        }
      }
    }
  }
}</pre>
</div>
</div>
<div class="paragraph">
<p>in content studio query playground just to demonstrate the return of the data.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If you don&#8217;t see <code>Query playground</code> in the Content Studio menu, it has probably not been installed yet. Simply install the <a href="https://market.enonic.com/vendors/enonic/guillotine">Guillotine application</a>, and it will appear.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Queries executed on query playground will run in an endpoint that is different from the custom one we created, and therefore there is will be no <code>countryDetails</code> field in Person&#8217;s content type data field:</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/missing-field-on-playground.png" alt="countryDetails fields missing on query playground" width="50%"></span></p>
</div>
<div class="paragraph">
<p>Now let&#8217;s execute a POST request to our custom endpoint, requesting not only the fields from our content type, but also the field we extended:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>query {
  guillotine {
    get(key: "/mysite/bruno-reis") {
      ... on com_example_myproject_Person {
        data {
            firstName
            country
            countryDetails {
                cities
            }
        }
      }
    }
  }
}</pre>
</div>
</div>
<div class="paragraph">
<p>and here&#8217;s our response</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="images/data-on-altair.png" alt="Person data including countryDetails extension" width="100%"></span></p>
</div>
<div class="paragraph">
<p>In this last image we&#8217;ve used chrome&#8217;s extension Altair GraphQL Client to ran the query in a different url and  better visualize the results.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Need help? Ask questions on our <a href="https://discuss.enonic.com/">forum</a> visit our <a href="https://slack.enonic.com">community Slack</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2023-08-07 09:29:23 UTC
</div>
</div>
</body>
</html>